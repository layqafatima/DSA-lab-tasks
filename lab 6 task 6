#include <iostream>
#include <stack>
#include <algorithm>
#include <string>
using namespace std;

int precedence(char op)
{
    if(op=='+'||op=='-') return 1;
    if(op=='*'||op=='/') return 2;
    return 0;
}

bool isOperator(char c)
{
    return (c=='+'||c=='-'||c=='*'||c=='/');
}

string infixToPrefix(string infix)
{
    reverse(infix.begin(),infix.end());
    for(int i=0;i<infix.length();i++)
    {
        if(infix[i]=='(') infix[i]=')';
        else if(infix[i]==')') infix[i]='(';
    }

    stack<char> s;
    string prefix="";
    for(int i=0;i<infix.length();i++)
    {
        char c=infix[i];
        if(c==' ') continue;
        if(isalnum(c))
            prefix+=c;
        else if(c=='(')
            s.push(c);
        else if(c==')')
        {
            while(!s.empty()&&s.top()!='(')
            {
                prefix+=s.top();
                s.pop();
            }
            s.pop();
        }
        else if(isOperator(c))
        {
            while(!s.empty()&&precedence(s.top())>=precedence(c))
            {
                prefix+=s.top();
                s.pop();
            }
            s.push(c);
        }
    }
    while(!s.empty())
    {
        prefix+=s.top();
        s.pop();
    }
    reverse(prefix.begin(),prefix.end());
    return prefix;
}

int evaluatePrefix(string prefix)
{
    stack<int> s;
    for(int i=prefix.length()-1;i>=0;i--)
    {
        char c=prefix[i];
        if(isdigit(c))
            s.push(c-'0');
        else if(isOperator(c))
        {
            int val1=s.top(); s.pop();
            int val2=s.top(); s.pop();
            switch(c)
            {
                case '+': s.push(val1+val2); break;
                case '-': s.push(val1-val2); break;
                case '*': s.push(val1*val2); break;
                case '/': s.push(val1/val2); break;
            }
        }
    }
    return s.top();
}

int main()
{
    string infix;
    cout<<"Enter infix expression (single digits): ";
    cin>>infix;

    string prefix=infixToPrefix(infix);
    cout<<"Prefix expression: "<<prefix<<endl;

    int result=evaluatePrefix(prefix);
    cout<<"Result: "<<result<<endl;
}
