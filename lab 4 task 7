#include <iostream>
#include <ctime>
using namespace std;

void shellSort(int arr[], int n, long long &comparisons, long long &swaps) {
    comparisons = 0;
    swaps = 0;
    for(int gap = n/2; gap > 0; gap /= 2) {
        for(int i = gap; i < n; i++) {
            int temp = arr[i];
            int j = i;
            while(j >= gap) {
                comparisons++;
                if(arr[j - gap] > temp) {
                    arr[j] = arr[j - gap];
                    swaps++;
                    j -= gap;
                } else {
                    break;
                }
            }
            arr[j] = temp;
        }
    }
}

void bubbleSort(int arr[], int n, long long &comparisons, long long &swaps) {
    comparisons = 0;
    swaps = 0;
    bool swapped = true;
    for(int pass = 0; pass < n-1 && swapped; pass++) {
        swapped = false;
        for(int i = 0; i < n-1-pass; i++) {
            comparisons++;
            if(arr[i] > arr[i+1]) {
                int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
                swaps++;
                swapped = true;
            }
        }
    }
}

void insertionSort(int arr[], int n, long long &comparisons, long long &swaps) {
    comparisons = 0;
    swaps = 0;
    for(int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while(j >= 0) {
            comparisons++;
            if(arr[j] > key) {
                arr[j+1] = arr[j];
                swaps++;
                j--;
            } else {
                break;
            }
        }
        arr[j+1] = key;
    }
}

int main() {
    int n;
    cout << "Enter the number of elements:";
    cin >> n;

    int original[n];
    cout << "Enter " << n << " integers:" << endl;
    for(int i = 0; i < n; i++)
        cin >> original[i];

    int arr[n];
    long long comparisons, swaps;
    clock_t startTime, endTime;

    for(int i = 0; i < n; i++) arr[i] = original[i];
    startTime = clock();
    shellSort(arr, n, comparisons, swaps);
    endTime = clock();
    cout << "\nShell Sort completed. Time: " << (double)(endTime - startTime)/CLOCKS_PER_SEC*1000 
         << " ms, Comparisons: " << comparisons << ", Swaps: " << swaps << endl;

    for(int i = 0; i < n; i++) arr[i] = original[i];
    startTime = clock();
    bubbleSort(arr, n, comparisons, swaps);
    endTime = clock();
    cout << "Bubble Sort completed. Time: " << (double)(endTime - startTime)/CLOCKS_PER_SEC*1000 
         << " ms, Comparisons: " << comparisons << ", Swaps: " << swaps << endl;

    for(int i = 0; i < n; i++) arr[i] = original[i];
    startTime = clock();
    insertionSort(arr, n, comparisons, swaps);
    endTime = clock();
    cout << "Insertion Sort completed. Time: " << (double)(endTime - startTime)/CLOCKS_PER_SEC*1000 
         << " ms, Comparisons: " << comparisons << ", Swaps: " << swaps << endl;

    return 0;
}
