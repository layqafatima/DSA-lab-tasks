#include <iostream>
#include <stack>
#include <string>
using namespace std;

int precedence(char op)
{
    if(op=='+'||op=='-') return 1;
    if(op=='*'||op=='/') return 2;
    return 0;
}

bool isOperator(char c)
{
    return (c=='+'||c=='-'||c=='*'||c=='/');
}

string infixToPostfix(string infix)
{
    stack<char> s;
    string postfix="";
    for(int i=0;i<infix.length();i++)
    {
        char c=infix[i];
        if(c==' ') continue;
        if(isalnum(c))
            postfix+=c;
        else if(c=='(')
            s.push(c);
        else if(c==')')
        {
            while(!s.empty()&&s.top()!='(')
            {
                postfix+=s.top();
                s.pop();
            }
            s.pop();
        }
        else if(isOperator(c))
        {
            while(!s.empty()&&precedence(s.top())>=precedence(c))
            {
                postfix+=s.top();
                s.pop();
            }
            s.push(c);
        }
    }
    while(!s.empty())
    {
        postfix+=s.top();
        s.pop();
    }
    return postfix;
}

int evaluatePostfix(string postfix)
{
    stack<int> s;
    for(int i=0;i<postfix.length();i++)
    {
        char c=postfix[i];
        if(isdigit(c))
            s.push(c-'0');
        else if(isOperator(c))
        {
            int val2=s.top(); s.pop();
            int val1=s.top(); s.pop();
            switch(c)
            {
                case '+': s.push(val1+val2); break;
                case '-': s.push(val1-val2); break;
                case '*': s.push(val1*val2); break;
                case '/': s.push(val1/val2); break;
            }
        }
    }
    return s.top();
}

int main()
{
    string infix;
    cout<<"Enter infix expression (use single digits): ";
    cin>>infix;
    string postfix=infixToPostfix(infix);
    cout<<"Postfix expression: "<<postfix<<endl;
    int result=evaluatePostfix(postfix);
    cout<<"Result: "<<result<<endl;
}
